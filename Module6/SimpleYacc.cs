// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-BR3L60F
// DateTime: 08.10.2022 23:09:04
// UserName: Mike
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,WHILE=8,DO=9,REPEAT=10,UNTIL=11,FOR=12,
    TO=13,INUM=14,RNUM=15,ID=16};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[20];
  private static State[] states = new State[41];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "assign", "statement", "cycle", "while", "repeat", "for", 
      "stlist", "block", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-11,1,-10,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{16,14,3,4,5,18,8,22,10,27,12,32},new int[]{-9,5,-4,40,-3,9,-2,10,-10,16,-5,17,-6,21,-7,26,-8,31});
    states[5] = new State(new int[]{4,6,7,7});
    states[6] = new State(-15);
    states[7] = new State(new int[]{16,14,3,4,5,18,8,22,10,27,12,32},new int[]{-4,8,-3,9,-2,10,-10,16,-5,17,-6,21,-7,26,-8,31});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{6,11});
    states[11] = new State(new int[]{16,14,14,15},new int[]{-1,12,-2,13});
    states[12] = new State(-12);
    states[13] = new State(-13);
    states[14] = new State(-11);
    states[15] = new State(-14);
    states[16] = new State(-6);
    states[17] = new State(-7);
    states[18] = new State(new int[]{16,14,14,15},new int[]{-1,19,-2,13});
    states[19] = new State(new int[]{16,14,3,4,5,18,8,22,10,27,12,32},new int[]{-4,20,-3,9,-2,10,-10,16,-5,17,-6,21,-7,26,-8,31});
    states[20] = new State(-16);
    states[21] = new State(-8);
    states[22] = new State(new int[]{16,14,14,15},new int[]{-1,23,-2,13});
    states[23] = new State(new int[]{9,24});
    states[24] = new State(new int[]{16,14,3,4,5,18,8,22,10,27,12,32},new int[]{-4,25,-3,9,-2,10,-10,16,-5,17,-6,21,-7,26,-8,31});
    states[25] = new State(-17);
    states[26] = new State(-9);
    states[27] = new State(new int[]{16,14,3,4,5,18,8,22,10,27,12,32},new int[]{-4,28,-3,9,-2,10,-10,16,-5,17,-6,21,-7,26,-8,31});
    states[28] = new State(new int[]{11,29});
    states[29] = new State(new int[]{16,14,14,15},new int[]{-1,30,-2,13});
    states[30] = new State(-18);
    states[31] = new State(-10);
    states[32] = new State(new int[]{16,14},new int[]{-2,33});
    states[33] = new State(new int[]{6,34});
    states[34] = new State(new int[]{16,14,14,15},new int[]{-1,35,-2,13});
    states[35] = new State(new int[]{13,36});
    states[36] = new State(new int[]{16,14,14,15},new int[]{-1,37,-2,13});
    states[37] = new State(new int[]{9,38});
    states[38] = new State(new int[]{16,14,3,4,5,18,8,22,10,27,12,32},new int[]{-4,39,-3,9,-2,10,-10,16,-5,17,-6,21,-7,26,-8,31});
    states[39] = new State(-19);
    states[40] = new State(-3);

    rules[1] = new Rule(-12, new int[]{-11,2});
    rules[2] = new Rule(-11, new int[]{-10});
    rules[3] = new Rule(-9, new int[]{-4});
    rules[4] = new Rule(-9, new int[]{-9,7,-4});
    rules[5] = new Rule(-4, new int[]{-3});
    rules[6] = new Rule(-4, new int[]{-10});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-4, new int[]{-6});
    rules[9] = new Rule(-4, new int[]{-7});
    rules[10] = new Rule(-4, new int[]{-8});
    rules[11] = new Rule(-2, new int[]{16});
    rules[12] = new Rule(-3, new int[]{-2,6,-1});
    rules[13] = new Rule(-1, new int[]{-2});
    rules[14] = new Rule(-1, new int[]{14});
    rules[15] = new Rule(-10, new int[]{3,-9,4});
    rules[16] = new Rule(-5, new int[]{5,-1,-4});
    rules[17] = new Rule(-6, new int[]{8,-1,9,-4});
    rules[18] = new Rule(-7, new int[]{10,-4,11,-1});
    rules[19] = new Rule(-8, new int[]{12,-2,6,-1,13,-1,9,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 4: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 5: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 7: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 9: // statement -> repeat
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 10: // statement -> for
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 11: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 12: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 13: // expr -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 14: // expr -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 15: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 16: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 17: // while -> WHILE, expr, DO, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 18: // repeat -> REPEAT, statement, UNTIL, expr
{ CurrentSemanticValue.stVal = new RepeatNode(ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 19: // for -> FOR, ident, ASSIGN, expr, TO, expr, DO, statement
{ CurrentSemanticValue.stVal = new ForNode(ValueStack[ValueStack.Depth-7].eVal as IdNode, ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
